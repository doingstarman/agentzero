import logging
import sys
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from database import UserDatabase
from openai_client import OpenAIClient

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.DEBUG,
    stream=sys.stdout
)

logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
try:
    db = UserDatabase()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    raise

def get_main_menu_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    keyboard = [
        [
            InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='settings'),
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')
        ],
        [
            InlineKeyboardButton("üì¢ –ú–æ–∏ –∫–∞–Ω–∞–ª—ã", callback_data='my_channels')
        ],
        [
            InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª", callback_data='add_channel')
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_back_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥"""
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]]
    return InlineKeyboardMarkup(keyboard)

def get_ready_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π –≥–æ—Ç–æ–≤–æ"""
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data='ready')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_excellent_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π –û—Ç–ª–∏—á–Ω–æ"""
    keyboard = [[InlineKeyboardButton("üéâ –û—Ç–ª–∏—á–Ω–æ", callback_data='excellent')]]
    return InlineKeyboardMarkup(keyboard)

def get_channel_settings_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–Ω–∞–ª–∞"""
    keyboard = [
        [
            InlineKeyboardButton("ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞", callback_data='assistant_settings'),
            InlineKeyboardButton("‚è∞ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è", callback_data='restrictions')
        ],
        [
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_assistant_settings_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
    keyboard = [
        [
            InlineKeyboardButton("üìù –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç", callback_data='system_prompt'),
            InlineKeyboardButton("üéØ –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ç–µ–º—ã", callback_data='allowed_topics')
        ],
        [
            InlineKeyboardButton("üö´ –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞", callback_data='forbidden_words'),
            InlineKeyboardButton("üé® –°—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–æ–≤", callback_data='response_style')
        ],
        [
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_main_menu_text(user_id: int, first_name: str = None) -> str:
    """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_channels = db.get_user_channels(user_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_text = f"–ü—Ä–∏–≤–µ—Ç, {first_name}!\n\n" if first_name else ""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–∞—Ö
    if user_channels:
        welcome_text += "–ö–∞–Ω–∞–ª—ã –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏:\n"
        for channel in user_channels:
            channel_status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if channel['settings']['auto_reply_enabled'] else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω"
            welcome_text += f"‚Ä¢ @{channel['username']} - {channel_status}\n"
    else:
        welcome_text += "–£ —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏\n"
    
    welcome_text += "\n–í—ã–±–µ—Ä–∏ —Å–≤–æ—ë –¥–µ–π—Å—Ç–≤–∏–µ üëá"
    return welcome_text

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start")
        user = update.effective_user
        db.add_user(
            user_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        db.update_user_activity(user.id, command='start')
        
        welcome_text = get_main_menu_text(user.id, user.first_name)
        await update.message.reply_text(welcome_text, reply_markup=get_main_menu_keyboard())
        logger.info("–ö–æ–º–∞–Ω–¥–∞ /start —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start: {e}")
        raise

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        logger.info("–ü–æ–ª—É—á–µ–Ω–æ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏")
        query = update.callback_query
        await query.answer()
        
        if query.data == 'ready':
            user_state = db.get_user_state(query.from_user.id)
            if not user_state:
                return
                
            current_state = user_state['state']
            logger.info(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {current_state}")
            
            if current_state == 'waiting_for_channel':
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –Ω–∏–∫–Ω–µ–π–º–∞ –∫–∞–Ω–∞–ª–∞
                db.set_user_state(query.from_user.id, 'waiting_for_channel_username')
                await query.message.edit_text(
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∏–∫–Ω–µ–π–º –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ @channelname\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: @mychannel",
                    reply_markup=get_back_keyboard()
                )
            elif current_state == 'waiting_for_channel_username':
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –±–æ—Ç–∞
                channel_username = user_state['data'].get('channel_username')
                if channel_username:
                    await query.message.edit_text(
                        "üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª:\n\n"
                        "1. –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞\n"
                        "2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã'\n"
                        "3. –ù–∞–∂–º–∏—Ç–µ '–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'\n"
                        "4. –ù–∞–π–¥–∏—Ç–µ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–æ–≥–æ –±–æ—Ç–∞\n"
                        "5. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –±–æ—Ç–∞ –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞:\n"
                        "   - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                        "   - –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                        "   - –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
                        "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'",
                        reply_markup=get_ready_keyboard()
                    )
                    db.set_user_state(query.from_user.id, 'waiting_for_channel_add', user_state['data'])
            elif current_state == 'waiting_for_channel_add':
                # –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞
                channel_username = user_state['data'].get('channel_username')
                if channel_username:
                    await query.message.edit_text(
                        "1. –î–∞–ª—å—à–µ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –º–æ—é —Å—Ç—Ä–∞–Ω–∏—Ü—É - –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –º–æ—é –∞–≤—É –ø—Ä—è–º–æ –≤ —ç—Ç–æ–º –¥–∏–∞–ª–æ–≥–µ "
                        "–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ \"–î–æ–±–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É –∏–ª–∏ –∫–∞–Ω–∞–ª\"\n\n"
                        "2. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∫–∞–Ω–∞–ª - –ø–µ—Ä–µ–¥ –≤–∞–º–∏ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π, –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–π—Ç–µ\n\n"
                        "3. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ \"–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\"\n\n"
                        "4. –ï—â–µ —Ä–∞–∑ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å",
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data='ready')
                        ]])
                    )
                    db.set_user_state(query.from_user.id, 'waiting_for_bot_add', user_state['data'])
            elif current_state == 'waiting_for_bot_add':
                # –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª
                channel_username = user_state['data'].get('channel_username')
                await query.message.edit_text(
                    f"–û—Ç–ª–∏—á–Ω–æ! –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª @{channel_username}. –¢–µ–ø–µ—Ä—å –º—ã –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–∏–º.\n\n"
                    "–î–ª—è –Ω–∞—á–∞–ª–∞ —É—Ç–æ—á–Ω–∏–º - –±–æ—Ç –Ω–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, "
                    "–∞ –¥–µ–ª–∞–µ—Ç —ç—Ç–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Ç–≥ –∫–∞–Ω–∞–ª–∞.\n\n"
                    "–ü—Ä–∏—à–ª–∏—Ç–µ —Å–≤–æ–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:",
                    reply_markup=get_back_keyboard()
                )
                db.set_user_state(query.from_user.id, 'waiting_for_system_prompt', user_state['data'])
            elif current_state == 'waiting_for_system_prompt':
                # –ó–∞–≤–µ—Ä—à–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
                channel_username = user_state['data'].get('channel_username')
                system_prompt = user_state['data'].get('system_prompt')
                if channel_username and system_prompt:
                    # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                    await query.message.edit_text(
                        "–ì–æ—Ç–æ–≤–æ! –ü–µ—Ä–≤–∏—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, "
                        "–≤—ã –º–æ–∂–µ—Ç–µ —É–ª—É—á—à–∏—Ç—å —Å–≤–æ—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö",
                        reply_markup=get_excellent_keyboard()
                    )
                    db.clear_user_state(query.from_user.id)
            return
        elif query.data == 'excellent':
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            menu_text = get_main_menu_text(query.from_user.id)
            await query.message.reply_text(menu_text, reply_markup=get_main_menu_keyboard())
            return

        if query.data == 'add_channel':
            db.set_user_state(query.from_user.id, 'waiting_for_channel')
            await query.message.edit_text(
                "üîÑ –ü—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞:\n\n"
                "1. –í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞\n"
                "2. –î–æ–±–∞–≤–ª—è–µ—Ç–µ –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã\n"
                "3. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤\n\n"
                "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º! –ü—Ä–∏—à–ª–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –∫–∞–Ω–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ @channelname",
                reply_markup=get_back_keyboard()
            )
        elif query.data == 'my_channels':
            channels = db.get_user_channels(query.from_user.id)
            if channels:
                text = "üì¢ –í–∞—à–∏ –∫–∞–Ω–∞–ª—ã:\n\n"
                for channel in channels:
                    channel_status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if channel['settings']['auto_reply_enabled'] else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω"
                    text += f"‚Ä¢ @{channel['username']} - {channel_status}\n"
                text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"
                
                keyboard = []
                for channel in channels:
                    keyboard.append([InlineKeyboardButton(
                        f"@{channel['username']} - {channel_status}",
                        callback_data=f'channel_{channel["id"]}'
                    )])
                keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')])
                
                await query.message.edit_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
                db.set_user_state(query.from_user.id, 'select_channel')
            else:
                await query.message.edit_text(
                    "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.\n"
                    "–ù–∞–∂–º–∏—Ç–µ '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª' –¥–ª—è –Ω–∞—á–∞–ª–∞.",
                    reply_markup=get_main_menu_keyboard()
                )
                db.clear_user_state(query.from_user.id)
        elif query.data.startswith('channel_'):
            channel_id = query.data.split('_')[1]
            channel = db.users['channels'].get(channel_id)
            if channel:
                await query.message.edit_text(
                    f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞ {channel['title']}\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:",
                    reply_markup=get_channel_settings_keyboard()
                )
                db.set_user_state(query.from_user.id, 'channel_settings', {'channel_id': channel_id})
        elif query.data == 'assistant_settings':
            user_state = db.get_user_state(query.from_user.id)
            if user_state and 'channel_id' in user_state['data']:
                channel_id = user_state['data']['channel_id']
                channel = db.users['channels'].get(str(channel_id))
                if channel:
                    settings = channel['settings']['assistant_settings']
                    text = (
                        f"ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel['title']}\n\n"
                        f"–ú–æ–¥–µ–ª—å: {settings['model']}\n"
                        f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {settings['temperature']}\n"
                        f"–ú–∞–∫—Å. —Ç–æ–∫–µ–Ω–æ–≤: {settings['max_tokens']}\n"
                        f"–°—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–æ–≤: {settings['response_style']}\n\n"
                        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"
                    )
                    await query.message.edit_text(text, reply_markup=get_assistant_settings_keyboard())
                    db.set_user_state(query.from_user.id, 'setting_assistant', {'channel_id': channel_id})
        elif query.data in ['settings', 'stats']:
            await query.message.edit_text(
                "üöß –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –µ—ë –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º.",
                reply_markup=get_back_keyboard()
            )
        elif query.data == 'back':
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_state = db.get_user_state(query.from_user.id)
            if not user_state:
                # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                menu_text = get_main_menu_text(query.from_user.id)
                await query.message.edit_text(menu_text, reply_markup=get_main_menu_keyboard())
                db.clear_user_state(query.from_user.id)
            else:
                current_state = user_state['state']
                # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥
                if current_state == 'waiting_for_channel':
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                    menu_text = get_main_menu_text(query.from_user.id)
                    await query.message.edit_text(menu_text, reply_markup=get_main_menu_keyboard())
                    db.clear_user_state(query.from_user.id)
                elif current_state == 'waiting_for_channel_add':
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–≤–æ–¥—É –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞
                    await query.message.edit_text(
                        "üîÑ –ü—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞:\n\n"
                        "1. –í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞\n"
                        "2. –î–æ–±–∞–≤–ª—è–µ—Ç–µ –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã\n"
                        "3. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤\n\n"
                        "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º! –ü—Ä–∏—à–ª–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –∫–∞–Ω–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ @channelname",
                        reply_markup=get_back_keyboard()
                    )
                    db.set_user_state(query.from_user.id, 'waiting_for_channel')
                elif current_state == 'waiting_for_system_prompt':
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –±–æ—Ç–∞
                    channel_username = user_state['data'].get('channel_username')
                    await query.message.edit_text(
                        "1. –î–∞–ª—å—à–µ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –º–æ—é —Å—Ç—Ä–∞–Ω–∏—Ü—É - –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –º–æ—é –∞–≤—É –ø—Ä—è–º–æ –≤ —ç—Ç–æ–º –¥–∏–∞–ª–æ–≥–µ "
                        "–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ \"–î–æ–±–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É –∏–ª–∏ –∫–∞–Ω–∞–ª\"\n\n"
                        "2. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∫–∞–Ω–∞–ª - –ø–µ—Ä–µ–¥ –≤–∞–º–∏ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π, –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–π—Ç–µ\n\n"
                        "3. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ \"–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\"\n\n"
                        "4. –ï—â–µ —Ä–∞–∑ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å",
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data='ready')
                        ]])
                    )
                    db.set_user_state(query.from_user.id, 'waiting_for_bot_add', user_state['data'])
                elif current_state in ['select_channel', 'channel_settings', 'setting_assistant']:
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–∞–Ω–∞–ª–æ–≤
                    channels = db.get_user_channels(query.from_user.id)
                    if channels:
                        text = "üì¢ –í–∞—à–∏ –∫–∞–Ω–∞–ª—ã:\n\n"
                        for channel in channels:
                            channel_status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if channel['settings']['auto_reply_enabled'] else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω"
                            text += f"‚Ä¢ @{channel['username']} - {channel_status}\n"
                        text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"
                        
                        keyboard = []
                        for channel in channels:
                            keyboard.append([InlineKeyboardButton(
                                f"@{channel['username']} - {channel_status}",
                                callback_data=f'channel_{channel["id"]}'
                            )])
                        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')])
                        
                        await query.message.edit_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
                        db.set_user_state(query.from_user.id, 'select_channel')
                    else:
                        menu_text = get_main_menu_text(query.from_user.id)
                        await query.message.edit_text(menu_text, reply_markup=get_main_menu_keyboard())
                        db.clear_user_state(query.from_user.id)
                else:
                    # –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                    menu_text = get_main_menu_text(query.from_user.id)
                    await query.message.edit_text(menu_text, reply_markup=get_main_menu_keyboard())
                    db.clear_user_state(query.from_user.id)
        logger.info(f"–ö–Ω–æ–ø–∫–∞ {query.data} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏: {e}")
        raise

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤)
async def handle_forwarded_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        logger.info("–ü–æ–ª—É—á–µ–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        user = update.effective_user
        message = update.message
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_state = db.get_user_state(user.id)
        if not user_state or user_state['state'] != 'waiting_for_channel_add':
            await message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        if message.forward_from_chat and message.forward_from_chat.type in ['channel', 'group']:
            channel = message.forward_from_chat
            channel_username = user_state['data'].get('channel_username')
            if channel_username and channel.username == channel_username:
                if db.add_channel(channel.id, channel.title, user.id, channel_username):
                    await message.reply_text(
                        f"‚úÖ –ö–∞–Ω–∞–ª {channel.title} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                        "–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º, –∫–∞–∫ –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.\n\n"
                        "–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫ –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—á–∞—Ç—å –±–æ—Ç –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.\n"
                        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                        "- –û—Ç–≤–µ—á–∞—Ç—å –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É\n"
                        "- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ç–æ–Ω\n"
                        "- –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ\n"
                        "- –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã\n\n"
                        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:",
                        reply_markup=get_back_keyboard()
                    )
                    db.set_user_state(user.id, 'waiting_for_system_prompt')
                else:
                    await message.reply_text(
                        "‚ùå –≠—Ç–æ—Ç –∫–∞–Ω–∞–ª —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º—É.",
                        reply_markup=get_main_menu_keyboard()
                    )
                    db.clear_user_state(user.id)
            else:
                await message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –Ω–∏–∫–Ω–µ–π–º–æ–º.",
                    reply_markup=get_back_keyboard()
                )
        else:
            await message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å.",
                reply_markup=get_back_keyboard()
            )
        logger.info("–ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        raise

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        logger.info("–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        user = update.effective_user
        message = update.message
        user_state = db.get_user_state(user.id)
        
        if not user_state:
            return
        
        if user_state['state'] == 'waiting_for_channel':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–∏–∫–Ω–µ–π–º–∞ –∫–∞–Ω–∞–ª–∞
            username = message.text.strip()
            if username.startswith('@') and len(username) > 1:
                username = username[1:]  # –£–±–∏—Ä–∞–µ–º @ –∏–∑ –Ω–∞—á–∞–ª–∞
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∏–∫–Ω–µ–π–º –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
                user_state['data'] = {'channel_username': username}
                db.set_user_state(user.id, 'waiting_for_channel_add', user_state['data'])
                await message.reply_text(
                    "–û—Ç–ª–∏—á–Ω–æ. –ê —Ç–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è —Ç—É–¥–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                    reply_markup=get_ready_keyboard()
                )
            else:
                await message.reply_text(
                    "–≠—Ç–æ –Ω–µ–ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞. –ü—Ä–∏—à–ª–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ @channelname",
                    reply_markup=get_back_keyboard()
                )
        elif user_state['state'] == 'waiting_for_system_prompt':
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            user_state['data']['system_prompt'] = message.text
            db.set_user_state(user.id, user_state['state'], user_state['data'])
            await message.reply_text(
                "‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –±–æ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n"
                "–ù–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ', —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É.",
                reply_markup=get_ready_keyboard()
            )
        logger.info("–¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        raise

async def get_channel_context(chat_id: int, context: ContextTypes.DEFAULT_TYPE, limit: int = 10) -> list:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    try:
        messages = []
        async for message in context.bot.get_chat_history(chat_id, limit=limit):
            if message.text:
                messages.append({
                    "role": "system" if message.from_user.id == context.bot.id else "user",
                    "content": message.text
                })
        return messages[::-1]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∫–∞–Ω–∞–ª–∞: {e}")
        return []

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–∞—Ö
async def handle_channel_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        message = update.message
        chat = message.chat
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Ç –∫–∞–Ω–∞–ª–æ–º
        if chat.type not in ['channel', 'group']:
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞–Ω–∞–ª –≤ –±–∞–∑–µ
        channel_id = str(chat.id)
        if channel_id not in db.users['channels']:
            return
            
        channel = db.users['channels'][channel_id]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã
        if not channel['settings']['auto_reply_enabled']:
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        restrictions = channel['settings']['restrictions']
        current_time = datetime.now()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
        start_time = datetime.strptime(restrictions['active_hours']['start'], '%H:%M').time()
        end_time = datetime.strptime(restrictions['active_hours']['end'], '%H:%M').time()
        if not (start_time <= current_time.time() <= end_time):
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á OpenAI –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞–Ω–∞–ª–∞
        owner_id = int(channel['owner_id'])
        openai_key = db.get_user_openai_key(owner_id)
        if not openai_key:
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–Ω–∞–ª–∞
        channel_context = await get_channel_context(chat.id, context)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        client = OpenAIClient(openai_key)
        response = client.generate_response(
            message.text,
            channel['settings'],
            context=channel_context
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await message.reply_text(response)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ: {e}")

def main():
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–¥–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
        application = Application.builder().token('8083571952:AAFZDg2UfFAlhQzOd-cDapTQv7X90BDD_bg').build()

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CallbackQueryHandler(button_handler))
        application.add_handler(MessageHandler(filters.FORWARDED, handle_forwarded_message))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
        application.add_handler(MessageHandler(filters.ChatType.CHANNEL | filters.ChatType.GROUP, handle_channel_message))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        application.run_polling(allowed_updates=Update.ALL_TYPES)
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise

if __name__ == '__main__':
    main() 